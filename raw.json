{
  "DirCollection": [
    {
      "DirName": "Basic",
      "AllClass": [
        {
          "ClassName": "Block",
          "AllFunc": [
            {
              "Description": "获取方块对应的NBT对象",
              "FuncName": "getNbt",
              "ReturnDescription": "方块的NBT对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "写入方块对应的NBT对象",
              "FuncName": "setNbt",
              "ReturnDescription": "是否成功写入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "NBT对象",
                  "ParamType": "NbtCompound",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取方块的BlockState\r\n方便函数，协助解析方块BlockState并转换为Object，方便读取与解析\r\n等价于脚本执行block.getNbt().getTag(\"states\").toObject()",
              "FuncName": "getBlockState",
              "ReturnDescription": "方块的BlockState",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Object"
            },
            {
              "Description": "写入方块对应的NBT对象",
              "FuncName": "setNbt",
              "ReturnDescription": "是否成功写入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "NBT对象",
                  "ParamType": "NbtCompound",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "判断方块是否拥有容器",
              "FuncName": "hasContainer",
              "ReturnDescription": "这个方块是否拥有容器",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取方块所拥有的容器对象",
              "FuncName": "getContainer",
              "ReturnDescription": "这个方块所拥有的容器对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Container"
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "name",
              "Description": "游戏内显示的方块名称",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "type",
              "Description": "方块标准类型名\t",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "id",
              "Description": "方块的游戏内id",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "pos",
              "Description": "方块所在坐标",
              "PropertyType": "IntPos",
              "IsReadonly": true,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "方块对象"
        },
        {
          "ClassName": "Container",
          "AllFunc": [
            {
              "Description": "放入物品对象到容器中 ",
              "FuncName": "addItem",
              "ReturnDescription": "是否成功增加",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待增加的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "放入物品对象到容器的第一个空格子",
              "FuncName": "addItemToFirstEmptySlot",
              "ReturnDescription": "是否成功增加",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待增加的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "检查容器中是否（有空间）可以放入此物品 ",
              "FuncName": "hasRoomFor",
              "ReturnDescription": "是否可以放入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待放入的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "减少容器中的某个物品对象",
              "FuncName": "removeItem",
              "ReturnDescription": "是否成功减少",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "减少的物品对象所在的格子序号",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "减少的数量。如果大于等于此格子物品堆叠的数量，则物品堆将被整个清除",
                  "ParamType": "Integer",
                  "ParamName": "count",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取容器某个格子的物品对象",
              "FuncName": "getItem",
              "ReturnDescription": "格子位置的物品对象",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待获取的格子序号",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                }
              ],
              "ReturnType": "Item"
            },
            {
              "Description": "获取容器所有格子的物品对象列表",
              "FuncName": "getAllItems",
              "ReturnDescription": "容器中所有的物品对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Array@Item"
            },
            {
              "Description": "清空容器",
              "FuncName": "removeAllItems",
              "ReturnDescription": "是否成功清空",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "判断容器是否为空",
              "FuncName": "isEmpty",
              "ReturnDescription": "当前容器是否为空",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "size",
              "Description": "容器拥有的格子总数",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "👜 容器对象 API\r\n在LXL中，使用「容器对象」来操作拥有格子、可以储存和放置物品的容器的相关信息。  \n此处的 **容器** 是一种宽泛的概念，除了箱子、桶这些传统的容器之外，如玩家物品栏、羊驼携带的箱子等这些也统统可以作为「容器」处理，获取并使用容器对应的API"
        },
        {
          "ClassName": "Device",
          "AllFunc": [
            {
              "Description": "",
              "FuncName": "",
              "ReturnDescription": "",
              "IsStatic": false,
              "Params": [],
              "ReturnType": ""
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "ip",
              "Description": "玩家设备的IP地址",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "avgPing",
              "Description": "玩家的平均网络延迟时间（ms）",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "avgPacketLoss",
              "Description": "玩家的平均网络丢包率（%）",
              "PropertyType": "Float",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "os",
              "Description": "玩家设备的操作系统类型",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "clientId",
              "Description": "玩家客户端的识别码ID",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "📱 设备信息对象 API\r\n在LXL中，使用「设备信息对象」来操作和获取某一个玩家使用的游戏设备的相关信息"
        },
        {
          "ClassName": "Entity",
          "AllFunc": [
            {
              "Description": "传送实体至指定位置",
              "FuncName": "teleport",
              "ReturnDescription": "是否成功传送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "目标位置坐标 （或者使用x, y, z, dimid来确定玩家位置）",
                  "ParamType": "FloatPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "传送实体至指定位置",
              "FuncName": "teleport",
              "ReturnDescription": "是否成功传送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "x",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "dimid",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "杀死指定实体 ",
              "FuncName": "kill",
              "ReturnDescription": "是否成功执行",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "使指定实体着火",
              "FuncName": "setOnFire",
              "ReturnDescription": "是否成功着火",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "着火时长，单位秒",
                  "ParamType": "Integer",
                  "ParamName": "time",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "判断一个实体对象是不是玩家",
              "FuncName": "isPlayer",
              "ReturnDescription": "当前实体对象是不是玩家",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "将实体对象转换玩家对象",
              "FuncName": "toPlayer",
              "ReturnDescription": "转换成的玩家对象\r\n如果此实体对象指向的不是某个玩家，或者转换失败，则返回 `Null`",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Player|Null"
            },
            {
              "Description": "获取生物盔甲栏的容器对象  ",
              "FuncName": "getArmor",
              "ReturnDescription": "此实体盔甲栏对应的容器对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Container"
            },
            {
              "Description": "判断生物是否拥有容器（盔甲栏除外）",
              "FuncName": "hasContainer",
              "ReturnDescription": "个生物实体是否拥有容器",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取生物所拥有的容器对象（盔甲栏除外）",
              "FuncName": "getContainer",
              "ReturnDescription": "这个生物实体所拥有的容器对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Container"
            },
            {
              "Description": "为实体增加一个Tag",
              "FuncName": "addTag",
              "ReturnDescription": "是否设置成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要增加的tag字符串",
                  "ParamType": "String",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "为实体移除一个Tag",
              "FuncName": "removeTag",
              "ReturnDescription": "是否移除成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要移除的tag字符串",
                  "ParamType": "String",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "实体拥有的所有Tag列表",
              "FuncName": "getAllTags",
              "ReturnDescription": "实体所有的 tag 字符串列表",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Array@String"
            },
            {
              "Description": "检查实体是否拥有某个Tag",
              "FuncName": "hasTag",
              "ReturnDescription": "是否拥有这个Tag",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要检查的tag字符串",
                  "ParamType": "String",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取实体对应的NBT对象",
              "FuncName": "getNbt",
              "ReturnDescription": "玩家的NBT对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "写入实体对应的NBT对象",
              "FuncName": "setNbt",
              "ReturnDescription": "是否成功写入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "NBT对象",
                  "ParamType": "NbtCompound",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "对实体造成伤害\r\n注意，此处造成的伤害为真实伤害，无法被盔甲等保护装备减免",
              "FuncName": "hurt",
              "ReturnDescription": "是否造成伤害",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "对实体造成的伤害数值",
                  "ParamType": "Integer",
                  "ParamName": "damage",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "刷新生物物品栏、盔甲栏",
              "FuncName": "refreshItems",
              "ReturnDescription": "",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "name",
              "Description": "实体名称",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "type",
              "Description": "实体标准类型名",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "id",
              "Description": "实体的游戏内id",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "pos",
              "Description": "实体所在坐标",
              "PropertyType": "FloatPos",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "blockPos",
              "Description": "实体所在的方块坐标",
              "PropertyType": "IntPos",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "maxHealth",
              "Description": "实体最大生命值",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "health",
              "Description": "实体当前生命值",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "inAir",
              "Description": "实体当前是否悬空",
              "PropertyType": "Boolean",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "speed",
              "Description": "实体当前速度",
              "PropertyType": "Float",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "inWater",
              "Description": "实体当前是否在水中",
              "PropertyType": "Boolean",
              "IsReadonly": true,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "🎈 实体对象 API\r\n在LXL中，使用「实体对象」来操作和获取某一个实体的相关信息。"
        },
        {
          "ClassName": "FloatPos",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "x",
              "Description": "x 坐标",
              "PropertyType": "Float",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "y",
              "Description": "y 坐标",
              "PropertyType": "Float",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "z",
              "Description": "z 坐标",
              "PropertyType": "Float",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "dim",
              "Description": "维度文字名",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "dimid",
              "Description": "维度ID",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "🎯 坐标对象\r\n多用来表示实体坐标等用无法用整数表示的位置"
        },
        {
          "ClassName": "IntPos",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "x",
              "Description": "x 坐标",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "y",
              "Description": "y 坐标",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "z",
              "Description": "z 坐标",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "dim",
              "Description": "维度文字名",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "dimid",
              "Description": "维度ID",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "🎯 坐标对象\r\n多用来表示方块坐标等用整数表示的位置"
        },
        {
          "ClassName": "Item",
          "AllFunc": [
            {
              "Description": "通过 现有的物品对象 生成一个新的物品对象",
              "FuncName": "clone",
              "ReturnDescription": "生成的新物品对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Item"
            },
            {
              "Description": "判断物品对象是否为空",
              "FuncName": "isNull",
              "ReturnDescription": "这个物品对象是否为空",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "将此物品对象置为空（删除物品）",
              "FuncName": "setNull",
              "ReturnDescription": "是否删除成功",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "将此物品对象设置为另一个物品",
              "FuncName": "set",
              "ReturnDescription": "是否赋值成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要赋值的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "根据物品对象，在指定的位置生成一个同样内容的掉落物实体",
              "FuncName": "spawnItem",
              "ReturnDescription": "生成的掉落物实体对象\r\n如返回值为 Null 则表示生成失败",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "生成掉落物实体所使用的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                },
                {
                  "Description": "生成掉落物实体的位置的坐标对象（或者使用x, y, z, dimid来确定生成位置）",
                  "ParamType": "FloatPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Entity"
            },
            {
              "Description": "获取物品对应的NBT对象\r\n",
              "FuncName": "getNbt",
              "ReturnDescription": "物品的NBT对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "写入物品对应的NBT对象",
              "FuncName": "setNbt",
              "ReturnDescription": "是否成功写入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "",
                  "ParamType": "NbtCompound",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "",
              "FuncName": "setLore",
              "ReturnDescription": "",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "",
                  "ParamType": "Array@String",
                  "ParamName": "lore",
                  "Optional": false
                }
              ],
              "ReturnType": ""
            },
            {
              "Description": "根据物品对象，在指定的位置生成一个同样内容的掉落物实体",
              "FuncName": "spawnItem",
              "ReturnDescription": "生成的掉落物实体对象\r\n如返回值为 Null 则表示生成失败",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "生成掉落物实体所使用的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                },
                {
                  "Description": "生成掉落物实体的位置的坐标对象（或者使用x, y, z, dimid来确定生成位置）",
                  "ParamType": "IntPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Entity"
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "name",
              "Description": "游戏内显示的物品名称",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "type",
              "Description": "物品标准类型名",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "id",
              "Description": "物品的游戏内id",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "count",
              "Description": "这个物品对象堆叠的个数",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "aux",
              "Description": "物品附加值（如羊毛颜色）",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "🧰 物品对象 API\r\n在LXL中，使用「物品对象」来操作和获取某一个物品栏物品的相关信息"
        },
        {
          "ClassName": "mc",
          "AllFunc": [
            {
              "Description": "生成一个浮点数坐标对象",
              "FuncName": "newFloatPos",
              "ReturnDescription": "一个浮点数坐标对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "x 坐标",
                  "ParamType": "Float",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y 坐标",
                  "ParamType": "Float",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z 坐标",
                  "ParamType": "Float",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "维度ID：0 代表主世界，1 代表下界，2 代表末地",
                  "ParamType": "Integer",
                  "ParamName": "dimid ",
                  "Optional": false
                }
              ],
              "ReturnType": "FloatPos"
            },
            {
              "Description": "获取BDS服务端版本号",
              "FuncName": "getBDSVersion",
              "ReturnDescription": "服务端版本号字符串，格式形如v1.17.10",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "String"
            },
            {
              "Description": "执行一条后台命令",
              "FuncName": "runcmd",
              "ReturnDescription": "是否执行成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待执行的命令",
                  "ParamType": "String",
                  "ParamName": "cmd",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "执行一条后台命令（强化版）",
              "FuncName": "runcmdEx",
              "ReturnDescription": "命令执行结果Object",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "指令内容",
                  "ParamType": "String",
                  "ParamName": "cmd",
                  "Optional": false
                }
              ],
              "ReturnType": "ObjectRuncmdEx"
            },
            {
              "Description": "通过方块坐标手动生成方块对象\r\n通过此函数来手动生成对象，注意，你要获取的方块必须处于已被加载的范围中，否则会出现问题",
              "FuncName": "getBlock",
              "ReturnDescription": "如返回值为 Null 则表示获取方块失败\r\n注意：不要长期保存一个方块对象\r\n当方块对象对应的方块被销毁时，对应的方块对象将变得无效。因此，如果有长期操作某个方块的需要，请通过上述途径获取实时的方块对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "方块坐标对象（或者使用x, y, z, dimid来确定方块位置）",
                  "ParamType": "IntPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Block|Null"
            },
            {
              "Description": "通过方块坐标手动生成方块对象\r\n通过此函数来手动生成对象，注意，你要获取的方块必须处于已被加载的范围中，否则会出现问题",
              "FuncName": "getBlock",
              "ReturnDescription": "如返回值为 Null 则表示获取方块失败\r\n注意：不要长期保存一个方块对象\r\n当方块对象对应的方块被销毁时，对应的方块对象将变得无效。因此，如果有长期操作某个方块的需要，请通过上述途径获取实时的方块对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "方块x坐标",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "方块y坐标",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "方块z坐标",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "方块维度",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                }
              ],
              "ReturnType": "Block|Null"
            },
            {
              "Description": "设置指定位置的方块",
              "FuncName": "setBlock",
              "ReturnDescription": "是否成功设置",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "目标方块位置",
                  "ParamType": "IntPos",
                  "ParamName": "pos",
                  "Optional": false
                },
                {
                  "Description": "要设置成的方块对象或者方块名",
                  "ParamType": "Block|String",
                  "ParamName": "block",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置指定位置的方块\r\n通过此函数，将一个坐标对应的方块设置成另一个，类似于命令 /setblock\r\n如果使用方块名称，则方块名称须为标准类型名，且首字母大写，类似于 Stone\r\n否则，函数将执行失败",
              "FuncName": "setBlock",
              "ReturnDescription": "是否成功设置",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "方块x坐标",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "方块y坐标",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "方块z坐标",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "方块维度",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                },
                {
                  "Description": "要设置成的方块对象或者方块名",
                  "ParamType": "Block|String",
                  "ParamName": "block",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "在指定位置生成粒子效果",
              "FuncName": "spawnParticle",
              "ReturnDescription": "是否成功生成",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "目标方块位置",
                  "ParamType": "IntPos",
                  "ParamName": "pos",
                  "Optional": false
                },
                {
                  "Description": "要生成的粒子效果名称（可查阅wiki得知）",
                  "ParamType": "String",
                  "ParamName": "type",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "在指定位置生成粒子效果",
              "FuncName": "spawnParticle",
              "ReturnDescription": "是否成功生成",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "方块x坐标",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "方块y坐标",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "方块z坐标",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "要生成的粒子效果名称（可查阅wiki得知）",
                  "ParamType": "String",
                  "ParamName": "type",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "注册一个新的玩家命令",
              "FuncName": "regPlayerCmd",
              "ReturnDescription": "是否成功注册",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待注册的命令",
                  "ParamType": "String",
                  "ParamName": "cmd",
                  "Optional": false
                },
                {
                  "Description": "命令描述文本",
                  "ParamType": "String",
                  "ParamName": "description",
                  "Optional": false
                },
                {
                  "Description": "注册的这个命令被执行时，接口自动调用的回调函数",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Array@String\",\"ParamName\":\"args\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）命令的注册等级，默认为 0 ，即所有人都可以执行",
                  "ParamType": "Integer",
                  "ParamName": "level",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "注册一个新的后台控制台命令",
              "FuncName": "regConsoleCmd",
              "ReturnDescription": "是否成功注册",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待注册的命令",
                  "ParamType": "String",
                  "ParamName": "cmd",
                  "Optional": false
                },
                {
                  "Description": "命令描述文本",
                  "ParamType": "String",
                  "ParamName": "description",
                  "Optional": false
                },
                {
                  "Description": "注册的这个命令被执行时，接口自动调用的回调函数",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Array@String\",\"ParamName\":\"args\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "模拟产生一个控制台命令输出",
              "FuncName": "sendCmdOutput",
              "ReturnDescription": "是否成功执行",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "模拟产生的命令输出",
                  "ParamType": "String",
                  "ParamName": "output",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取一个玩家对象",
              "FuncName": "getPlayer",
              "ReturnDescription": "生成的玩家对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家的名字或者Xuid",
                  "ParamType": "String",
                  "ParamName": "info",
                  "Optional": false
                }
              ],
              "ReturnType": "Player"
            },
            {
              "Description": "获取所有在线玩家的列表",
              "FuncName": "getOnlinePlayers",
              "ReturnDescription": "在线的玩家对象列表",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "Array@Player"
            },
            {
              "Description": "广播一个文本消息给所有玩家",
              "FuncName": "broadcast",
              "ReturnDescription": "是否成功发送",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待发送的文本",
                  "ParamType": "String",
                  "ParamName": "msg",
                  "Optional": false
                },
                {
                  "Description": "发送的文本消息类型，默认为0",
                  "ParamType": "Integer",
                  "ParamName": "type",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置指定位置的方块",
              "FuncName": "setBlock",
              "ReturnDescription": "是否成功设置",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "目标方块位置（或者使用x, y, z, dimid来确定方块位置）",
                  "ParamType": "IntPos",
                  "ParamName": "pos",
                  "Optional": false
                },
                {
                  "Description": "要设置成的方块对象或者方块名",
                  "ParamType": "Block|String",
                  "ParamName": "block",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置指定位置的方块",
              "FuncName": "setBlock",
              "ReturnDescription": "是否成功设置",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "x",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "dimid",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                },
                {
                  "Description": "要设置成的方块对象或者方块名",
                  "ParamType": "Block|String",
                  "ParamName": "block",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "在指定位置生成粒子效果",
              "FuncName": "spawnParticle",
              "ReturnDescription": "是否成功生成",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "目标生成位置（或者使用x, y, z, dimid来确定方块位置）",
                  "ParamType": "IntPos|FloatPos",
                  "ParamName": "pos",
                  "Optional": false
                },
                {
                  "Description": "要生成的粒子效果名称（可查阅wiki得知）",
                  "ParamType": "String",
                  "ParamName": "type",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "在指定位置生成粒子效果",
              "FuncName": "spawnParticle",
              "ReturnDescription": "是否成功生成",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "x",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "dimid",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                },
                {
                  "Description": "要生成的粒子效果名称（可查阅wiki得知）",
                  "ParamType": "String",
                  "ParamName": "type",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "在指定位置制造一次爆炸",
              "FuncName": "explode",
              "ReturnDescription": "是否成功制造爆炸",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "目标生成位置（或者使用x, y, z, dimid来确定方块位置）",
                  "ParamType": "IntPos|FloatPos",
                  "ParamName": "pos",
                  "Optional": false
                },
                {
                  "Description": "设置爆炸来源的实体对象，可以为`Null",
                  "ParamType": "Entity",
                  "ParamName": "source",
                  "Optional": false
                },
                {
                  "Description": "爆炸的威力值，影响爆炸的伤害大小和破坏范围",
                  "ParamType": "Float",
                  "ParamName": "power",
                  "Optional": false
                },
                {
                  "Description": "爆炸的范围半径，影响爆炸的波及范围",
                  "ParamType": "Float",
                  "ParamName": "range",
                  "Optional": false
                },
                {
                  "Description": "爆炸是否破坏方块",
                  "ParamType": "Boolean",
                  "ParamName": "isDestroy",
                  "Optional": false
                },
                {
                  "Description": "爆炸结束后是否留下燃烧的火焰",
                  "ParamType": "Boolean",
                  "ParamName": "isFire",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "在指定位置制造一次爆炸",
              "FuncName": "explode",
              "ReturnDescription": "是否成功制造爆炸",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "x",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "dimid",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                },
                {
                  "Description": "设置爆炸来源的实体对象，可以为`Null",
                  "ParamType": "Entity",
                  "ParamName": "source",
                  "Optional": false
                },
                {
                  "Description": "爆炸的威力值，影响爆炸的伤害大小和破坏范围",
                  "ParamType": "Float",
                  "ParamName": "power",
                  "Optional": false
                },
                {
                  "Description": "爆炸的范围半径，影响爆炸的波及范围",
                  "ParamType": "Float",
                  "ParamName": "range",
                  "Optional": false
                },
                {
                  "Description": "爆炸是否破坏方块",
                  "ParamType": "Boolean",
                  "ParamName": "isDestroy",
                  "Optional": false
                },
                {
                  "Description": "爆炸结束后是否留下燃烧的火焰",
                  "ParamType": "Boolean",
                  "ParamName": "isFire",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "生成物品对象  ",
              "FuncName": "newItem",
              "ReturnDescription": "生成的物品对象\r\n如返回值为 `Null` 则表示生成失败",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "物品的标准类型名，如`minecraft:bread`",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                },
                {
                  "Description": "物品堆叠数量",
                  "ParamType": "Integer",
                  "ParamName": "count",
                  "Optional": false
                }
              ],
              "ReturnType": "Item"
            },
            {
              "Description": "生成物品对象  ",
              "FuncName": "newItem",
              "ReturnDescription": "生成的物品对象\r\n如返回值为 `Null` 则表示生成失败",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "生成物品对象所使用的物品NBT",
                  "ParamType": "NbtCompound",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "Item"
            },
            {
              "Description": "生成一个整数类型坐标对象",
              "FuncName": "newIntPos",
              "ReturnDescription": "整数坐标对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "x 坐标",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y 坐标",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z 坐标",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "维度ID：0 代表主世界，1 代表下界，2 代表末地",
                  "ParamType": "Integer",
                  "ParamName": "dimid ",
                  "Optional": false
                }
              ],
              "ReturnType": "IntPos"
            },
            {
              "Description": "生成新生物并获取",
              "FuncName": "spawnMob",
              "ReturnDescription": "生成的实体对象，如返回值为 Null 则表示生成失败",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "生物的命名空间名称，如 minectaft:creeper",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                },
                {
                  "Description": "生成生物的位置的坐标对象（或者使用x, y, z, dimid来确定生成位置）",
                  "ParamType": "IntPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Entity"
            },
            {
              "Description": "生成新生物并获取",
              "FuncName": "spawnMob",
              "ReturnDescription": "生成的实体对象，如返回值为 Null 则表示生成失败",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                },
                {
                  "Description": "",
                  "ParamType": "Float",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "",
                  "ParamType": "Float",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "",
                  "ParamType": "Float",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                }
              ],
              "ReturnType": "Entity"
            },
            {
              "Description": "生成新生物并获取",
              "FuncName": "spawnMob",
              "ReturnDescription": "生成的实体对象，如返回值为 Null 则表示生成失败",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "生物的命名空间名称，如 minectaft:creeper",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                },
                {
                  "Description": "生成生物的位置的坐标对象（或者使用x, y, z, dimid来确定生成位置）",
                  "ParamType": "FloatPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Entity"
            },
            {
              "Description": "创建一个新的计分项",
              "FuncName": "newScoreObjective",
              "ReturnDescription": "新增创建的计分项对象，如果返回Null，则代表创建失败",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "计分项名称",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                },
                {
                  "Description": "计分项显示名称",
                  "ParamType": "String",
                  "ParamName": "displayName",
                  "Optional": false
                }
              ],
              "ReturnType": "Objective"
            },
            {
              "Description": "获取某个已存在的计分项",
              "FuncName": "getScoreObjective",
              "ReturnDescription": "对应的计分项对象，如果返回Null，则代表计分项不存在",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "要获取的计分项名称",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                }
              ],
              "ReturnType": "Objective"
            },
            {
              "Description": "获取所有计分项",
              "FuncName": "getAllScoreObjectives",
              "ReturnDescription": "计分板系统记录的所有计分项的对象数组",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "Array<Objective>"
            },
            {
              "Description": "移除一个已存在的计分项",
              "FuncName": "removeScoreObjective",
              "ReturnDescription": "是否移除成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "计分项名称",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取某个处于显示状态的计分项",
              "FuncName": "getDisplayObjectives",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "显示槽位名称字符串，可以为\"sidebar\"/\"belowname\"/\"list\"",
                  "ParamType": "String",
                  "ParamName": "slot",
                  "Optional": false
                }
              ],
              "ReturnType": "Objective"
            },
            {
              "Description": "使计分项停止显示",
              "FuncName": "clearDisplayObjective",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "显示槽位名称字符串，可以为\"sidebar\"/\"belowname\"/\"list\"",
                  "ParamType": "String",
                  "ParamName": "solt",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            }
          ],
          "AllProperty": [],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "mc通用接口"
        },
        {
          "ClassName": "Player",
          "AllFunc": [
            {
              "Description": "判断玩家是否为OP",
              "FuncName": "isOP",
              "ReturnDescription": "玩家是否为OP",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "断开玩家连接",
              "FuncName": "kick",
              "ReturnDescription": "是否成功断开连接",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "（可选参数）被踢出玩家出显示的断开原因",
                  "ParamType": "String",
                  "ParamName": "msg",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "断开玩家连接",
              "FuncName": "disconnect",
              "ReturnDescription": "是否成功断开连接",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "（可选参数）被踢出玩家出显示的断开原因",
                  "ParamType": "String",
                  "ParamName": "msg",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "发送一个文本消息给玩家",
              "FuncName": "tell",
              "ReturnDescription": "是否成功发送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待发送的文本",
                  "ParamType": "String",
                  "ParamName": "msg",
                  "Optional": false
                },
                {
                  "Description": "发送的文本消息类型，默认为0",
                  "ParamType": "Integer",
                  "ParamName": "type",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "发送一个文本消息给玩家",
              "FuncName": "sendText",
              "ReturnDescription": "是否成功发送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待发送的文本",
                  "ParamType": "String",
                  "ParamName": "msg",
                  "Optional": false
                },
                {
                  "Description": "发送的文本消息类型，默认为0",
                  "ParamType": "Integer",
                  "ParamName": "type",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "以某个玩家身份执行一条命令",
              "FuncName": "runcmd",
              "ReturnDescription": "是否执行成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "待执行的命令",
                  "ParamType": "String",
                  "ParamName": "cmd",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "传送玩家至指定位置",
              "FuncName": "teleport",
              "ReturnDescription": "是否成功传送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "目标位置坐标 （或者使用x, y, z, dimid来确定玩家位置）",
                  "ParamType": "FloatPos",
                  "ParamName": "pos",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "传送玩家至指定位置",
              "FuncName": "teleport",
              "ReturnDescription": "是否成功传送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "x",
                  "ParamType": "Integer",
                  "ParamName": "x",
                  "Optional": false
                },
                {
                  "Description": "y",
                  "ParamType": "Integer",
                  "ParamName": "y",
                  "Optional": false
                },
                {
                  "Description": "z",
                  "ParamType": "Integer",
                  "ParamName": "z",
                  "Optional": false
                },
                {
                  "Description": "dimid",
                  "ParamType": "Integer",
                  "ParamName": "dimid",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "杀死玩家",
              "FuncName": "kill",
              "ReturnDescription": "是否成功执行",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "使指定玩家着火",
              "FuncName": "setOnFire",
              "ReturnDescription": "是否成功着火",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "着火时长，单位秒",
                  "ParamType": "Integer",
                  "ParamName": "time",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "重命名玩家",
              "FuncName": "rename",
              "ReturnDescription": "是否重命名成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "玩家的新名字",
                  "ParamType": "String",
                  "ParamName": "newname",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取玩家对应的设备信息对象",
              "FuncName": "getDevice",
              "ReturnDescription": "玩家对应的设备信息对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Device"
            },
            {
              "Description": "获取玩家主手中的物品对象",
              "FuncName": "getHand",
              "ReturnDescription": "玩家主手中的物品对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Item"
            },
            {
              "Description": "获取玩家副手的物品对象",
              "FuncName": "getOffHand",
              "ReturnDescription": "玩家副手中的物品对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Item"
            },
            {
              "Description": "获取玩家物品栏的容器对象",
              "FuncName": "getInventory",
              "ReturnDescription": "玩家物品栏对应的容器对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Container"
            },
            {
              "Description": "获取玩家盔甲栏的容器对象",
              "FuncName": "getArmor ",
              "ReturnDescription": "玩家盔甲栏对应的容器对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Container"
            },
            {
              "Description": "获取玩家末影箱的容器对象",
              "FuncName": "getEnderChest",
              "ReturnDescription": "玩家末影箱对应的容器对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Container"
            },
            {
              "Description": "给予玩家一个物品",
              "FuncName": "giveItem",
              "ReturnDescription": "是否成功给予",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "给予的物品对象",
                  "ParamType": "Item",
                  "ParamName": "item",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "清除玩家背包中所有指定类型的物品",
              "FuncName": "clearItem",
              "ReturnDescription": "清除的物品个数",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要清除的物品对象类型名",
                  "ParamType": "String",
                  "ParamName": "type",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "刷新玩家所有物品",
              "FuncName": "refreshItems",
              "ReturnDescription": "是否成功刷新",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "修改玩家操作权限",
              "FuncName": "setPermLevel",
              "ReturnDescription": "是否成功修改",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "目标操作权限等级",
                  "ParamType": "Integer",
                  "ParamName": "level",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "修改玩家游戏模式",
              "FuncName": "setGameMode",
              "ReturnDescription": "是否成功修改",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "目标游戏模式，0为生存模式，1为创造模式，2为极限模式",
                  "ParamType": "Integer",
                  "ParamName": "mode",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "提高玩家经验等级",
              "FuncName": "addLevel",
              "ReturnDescription": "是否设置成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要提升的经验等级",
                  "ParamType": "Integer",
                  "ParamName": "count",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "传送玩家至指定服务器",
              "FuncName": "transServer",
              "ReturnDescription": "是否成功传送",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "目标服务器IP / 域名",
                  "ParamType": "String",
                  "ParamName": "server",
                  "Optional": false
                },
                {
                  "Description": "目标服务器端口",
                  "ParamType": "String",
                  "ParamName": "port",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "使玩家客户端崩溃",
              "FuncName": "crash",
              "ReturnDescription": "是否成功执行",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置玩家自定义侧边栏(暂时弃用)",
              "FuncName": "setSidebar",
              "ReturnDescription": "是否成功设置",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "侧边栏标题",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "侧边栏对象内容对象",
                  "ParamType": "Object@<String,Integer>",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "移除玩家自定义侧边栏",
              "FuncName": "removeSidebar",
              "ReturnDescription": "是否成功移除",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置玩家看到的自定义Boss血条",
              "FuncName": "setBossBar",
              "ReturnDescription": "是否成功设置",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "自定义血条标题",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "血条中的血量百分比，有效范围为0~100。0为空血条，100为满",
                  "ParamType": "Integer",
                  "ParamName": "percent",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "移除玩家的自定义Boss血条",
              "FuncName": "removeBossBar",
              "ReturnDescription": "是否成功移除",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取玩家对应的NBT对象",
              "FuncName": "getNbt",
              "ReturnDescription": "玩家的NBT对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "为玩家增加一个Tag",
              "FuncName": "addTag",
              "ReturnDescription": "是否设置成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要增加的tag字符串",
                  "ParamType": "String",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "为玩家移除一个Tag",
              "FuncName": "removeTag",
              "ReturnDescription": "是否移除成功",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要移除的tag字符串",
                  "ParamType": "String",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取玩家拥有的所有Tag列表",
              "FuncName": "getAllTags",
              "ReturnDescription": "玩家所有的 tag 字符串列表",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Array@String"
            },
            {
              "Description": "获取玩家的Abilities能力列表（来自玩家NBT）",
              "FuncName": "getAbilities",
              "ReturnDescription": "玩家所有能力信息的键 - 值对列表对象",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Object@<String,Any>"
            },
            {
              "Description": "获取玩家的Attributes属性列表（来自玩家NBT）",
              "FuncName": "getAttributes",
              "ReturnDescription": "玩家所有属性对象的数组",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Array@Attributes"
            },
            {
              "Description": "检查玩家是否拥有某个Tag",
              "FuncName": "hasTag",
              "ReturnDescription": "是否拥有这个Tag",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要检查的tag字符串",
                  "ParamType": "String",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "写入玩家对应的NBT对象",
              "FuncName": "setNbt",
              "ReturnDescription": "是否成功写入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "NBT对象",
                  "ParamType": "NbtCompound",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "向玩家发送模式表单，模式表单包含一个标题、一个文本显示框以及两个按钮",
              "FuncName": "sendModalForm",
              "ReturnDescription": "发送的表单ID",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "表单标题",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "表单内容",
                  "ParamType": "String",
                  "ParamName": "content",
                  "Optional": false
                },
                {
                  "Description": "按钮1文本的字符串",
                  "ParamType": "String",
                  "ParamName": "button1",
                  "Optional": false
                },
                {
                  "Description": "按钮2文本的字符串",
                  "ParamType": "String",
                  "ParamName": "button2",
                  "Optional": false
                },
                {
                  "Description": "玩家点击按钮之后被调用的回调函数。",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Integer\",\"ParamName\":\"id\",\"Optional\":false}],\"ReturnType\":\"void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "向玩家发送普通表单\r\n普通表单包含一个标题、一个文本显示框以及若干按钮，可以设置按钮上显示的图标",
              "FuncName": "sendSimpleForm",
              "ReturnDescription": "发送的表单ID",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "表单标题",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "表单内容",
                  "ParamType": "String",
                  "ParamName": "content",
                  "Optional": false
                },
                {
                  "Description": "各个按钮文本的字符串数组",
                  "ParamType": "Array@String",
                  "ParamName": "buttons",
                  "Optional": false
                },
                {
                  "Description": "各个按钮对应的图片路径\n对于表单上的每个按钮，如下设置对应的图标\n 1. 如果使用材质包路径，图片路径应该形如 textures/items/apple\n 2. 如果使用URL路径，那么在这里放入完整的URL即可，形如 https://www.baidu.com/img/flexible/logo/pc/result.png\n 3. 如果这个按钮你不需要显示图片，那将对应的图片路径设置为空字符串即可",
                  "ParamType": "Array@String",
                  "ParamName": "images",
                  "Optional": false
                },
                {
                  "Description": "玩家点击按钮之后被调用的回调函数",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Integer\",\"ParamName\":\"id\",\"Optional\":false}],\"ReturnType\":\"void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "向玩家发送自定义表单（Json格式）",
              "FuncName": "sendCustomForm",
              "ReturnDescription": "发送的表单ID",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "自定义表单json字符串",
                  "ParamType": "String",
                  "ParamName": "json_data",
                  "Optional": false
                },
                {
                  "Description": "玩家提交表单之后被调用的回调函数。",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Array@any\",\"ParamName\":\"data\",\"Optional\":false}],\"ReturnType\":\"void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "",
              "FuncName": "sendForm",
              "ReturnDescription": "",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "配置好的表单对象",
                  "ParamType": "SimpleForm",
                  "ParamName": "form",
                  "Optional": false
                },
                {
                  "Description": "玩家提交表单之后被调用的回调函数。",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Null\",\"ParamName\":\"id\",\"Optional\":false}],\"ReturnType\":\"\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": ""
            },
            {
              "Description": "",
              "FuncName": "sendForm",
              "ReturnDescription": "",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "配置好的表单对象",
                  "ParamType": "CustomForm",
                  "ParamName": "form",
                  "Optional": false
                },
                {
                  "Description": "玩家提交表单之后被调用的回调函数。",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Any[]\",\"ParamName\":\"data\",\"Optional\":false}],\"ReturnType\":\"\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": ""
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "name",
              "Description": "玩家名",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "pos",
              "Description": "玩家所在坐标",
              "PropertyType": "FloatPos",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "realName",
              "Description": "玩家的真实名字",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "xuid",
              "Description": "玩家Xuid字符串",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "uuid",
              "Description": "玩家Uuid字符串",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "permLevel",
              "Description": "玩家的操作权限等级（0 - 4）",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "gameMode",
              "Description": "玩家的游戏模式（0 - 3",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "maxHealth",
              "Description": "玩家最大生命值",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "health",
              "Description": "玩家当前生命值",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "inAir",
              "Description": "玩家当前是否悬空",
              "PropertyType": "Boolean",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "sneaking ",
              "Description": "玩家当前是否正在潜行",
              "PropertyType": "Boolean",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "speed",
              "Description": "玩家当前速度",
              "PropertyType": "Float",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "direction",
              "Description": "玩家当前朝向（0 - 4）",
              "PropertyType": "Integer",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "blockPos",
              "Description": "玩家所在的方块坐标",
              "PropertyType": "IntPos",
              "IsReadonly": true,
              "IsStatic": false
            },
            {
              "PropertyName": "inWater",
              "Description": "玩家当前是否在水中",
              "PropertyType": "Boolean",
              "IsReadonly": true,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "玩家对象"
        }
      ]
    },
    {
      "DirName": "Event",
      "AllClass": [
        {
          "ClassName": "mc",
          "AllFunc": [
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家开始连接服务器",
                  "ParamType": "\"onPreJoin\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家进入游戏（加载世界完成）",
                  "ParamType": "\"onJoin\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家离开游戏",
                  "ParamType": "\"onLeft\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家重生",
                  "ParamType": "\"onRespawn\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家死亡",
                  "ParamType": "\"onPlayerDie\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家执行命令",
                  "ParamType": "\"onPlayerCmd\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"String\",\"ParamName\":\"cmd\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家发送聊天信息",
                  "ParamType": "\"onChat\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"String\",\"ParamName\":\"msg\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家切换维度",
                  "ParamType": "\"onChangeDim\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家跳跃",
                  "ParamType": "\"onJump\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家切换潜行状态",
                  "ParamType": "\"onSneak\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Boolean\",\"ParamName\":\"isSneaking\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家攻击实体",
                  "ParamType": "\"onAttack\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Entity\",\"ParamName\":\"entity\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家使用物品",
                  "ParamType": "\"onUseItem\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家对方块使用物品（点击右键）",
                  "ParamType": "\"onUseItemOn\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家捡起物品",
                  "ParamType": "\"onTakeItem\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Entity\",\"ParamName\":\"entity\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家丢出物品",
                  "ParamType": "\"onDropItem\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家食用食物",
                  "ParamType": "\"onEat\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家开始破坏方块 / 点击左键",
                  "ParamType": "\"onStartDestroyBlock\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家破坏方块完成",
                  "ParamType": "\"onDestroyBlock\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家放置方块",
                  "ParamType": "\"onPlaceBlock\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家打开容器方块",
                  "ParamType": "\"onOpenContainer\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家关闭容器方块",
                  "ParamType": "\"onCloseContainer\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家物品栏变化",
                  "ParamType": "\"onInventoryChange\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Integer\",\"ParamName\":\"slotNum\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"oldItem\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"newItem\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家移动",
                  "ParamType": "\"onMove\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"FloatPos\",\"ParamName\":\"pos\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家改变盔甲栏",
                  "ParamType": "\"onSetArmor\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Integer\",\"ParamName\":\"slotNum\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家使用重生锚",
                  "ParamType": "\"onUseRespawnAnchor\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"IntPos\",\"ParamName\":\"pos\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
              "FuncName": "listen",
              "ReturnDescription": "是否添加成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "玩家打开容器类GUI",
                  "ParamType": "\"onOpenContainerScreen\"",
                  "ParamName": "event",
                  "Optional": false
                },
                {
                  "Description": "事件回调",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
                  "ParamName": "callback",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            }
          ],
          "AllProperty": [],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "mc通用接口"
        }
      ]
    },
    {
      "DirName": "Global",
      "AllClass": [
        {
          "ClassName": "Global",
          "AllFunc": [
            {
              "Description": "输出信息到控制台\r\n这是为了方便输出信息而设计的便捷函数",
              "FuncName": "log",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "",
                  "ParamType": "Any",
                  "ParamName": "data1",
                  "Optional": true
                },
                {
                  "Description": "",
                  "ParamType": "Any",
                  "ParamName": "data2",
                  "Optional": true
                },
                {
                  "Description": "",
                  "ParamType": "",
                  "ParamName": "data3",
                  "Optional": true
                }
              ],
              "ReturnType": "Null"
            },
            {
              "Description": "输出带颜色文本",
              "FuncName": "colorLog",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "此行输出的颜色",
                  "ParamType": "String",
                  "ParamName": "color",
                  "Optional": false
                },
                {
                  "Description": "",
                  "ParamType": "Any",
                  "ParamName": "data1",
                  "Optional": true
                },
                {
                  "Description": "",
                  "ParamType": "Any",
                  "ParamName": "data2",
                  "Optional": true
                }
              ],
              "ReturnType": "Null"
            },
            {
              "Description": "推迟一段时间执行函数",
              "FuncName": "setTimeout",
              "ReturnDescription": "此任务ID",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待执行的函数",
                  "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"\",\"ParamName\":\"\",\"Optional\":false}],\"ReturnType\":\"Any\"}}",
                  "ParamName": "func",
                  "Optional": false
                },
                {
                  "Description": "推迟执行的时间（毫秒）",
                  "ParamType": "Integer",
                  "ParamName": "msec",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "推迟一段时间执行代码段（eval）",
              "FuncName": "setTimeout",
              "ReturnDescription": "此任务ID",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待执行的代码段",
                  "ParamType": "String",
                  "ParamName": "code",
                  "Optional": false
                },
                {
                  "Description": "推迟执行的时间（毫秒）",
                  "ParamType": "Integer",
                  "ParamName": "msec",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "设置周期执行函数",
              "FuncName": "setInterval",
              "ReturnDescription": "此任务ID",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待执行的函数",
                  "ParamType": "Function@{\"Func\":{\"Params\":[],\"ReturnType\":\"Any\"}}",
                  "ParamName": "func",
                  "Optional": false
                },
                {
                  "Description": "执行间隔周期（毫秒）",
                  "ParamType": "Integer",
                  "ParamName": "msec",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "设置周期执行代码段（eval）",
              "FuncName": "setInterval",
              "ReturnDescription": "此任务ID",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待执行的代码段",
                  "ParamType": "String",
                  "ParamName": "code",
                  "Optional": false
                },
                {
                  "Description": "执行间隔周期（毫秒）",
                  "ParamType": "Integer",
                  "ParamName": "msec",
                  "Optional": false
                }
              ],
              "ReturnType": "Integer"
            },
            {
              "Description": "取消延时 / 周期执行项",
              "FuncName": "clearInterval",
              "ReturnDescription": "是否取消成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "由前几个函数返回的任务ID",
                  "ParamType": "Integer",
                  "ParamName": "timerid",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean|Null"
            }
          ],
          "AllProperty": [],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "全局方法、属性"
        }
      ]
    },
    {
      "DirName": "GUI",
      "AllClass": [
        {
          "ClassName": "CustomForm",
          "AllFunc": [
            {
              "Description": "设置表单的标题",
              "FuncName": "setTitle",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "标题",
                  "ParamType": "String",
                  "ParamName": "text",
                  "Optional": false
                }
              ],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "向表单内增加一行文本",
              "FuncName": "addLabel",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "一行文本",
                  "ParamType": "String",
                  "ParamName": "text",
                  "Optional": false
                }
              ],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "向表单内增加一行输入框",
              "FuncName": "addInput",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "输入框描述文本",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）输入框内的提示字符",
                  "ParamType": "String",
                  "ParamName": "placeholder",
                  "Optional": true
                },
                {
                  "Description": "（可选参数）输入框中默认存在的内容",
                  "ParamType": "String",
                  "ParamName": "default_text",
                  "Optional": true
                }
              ],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "向表单内增加一行开关选项",
              "FuncName": "addSwitch",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "开关选项描述文本",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）开关的默认状态 开 / 关",
                  "ParamType": "Boolean",
                  "ParamName": "default",
                  "Optional": true
                }
              ],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "向表单内增加一行下拉菜单",
              "FuncName": "addDropdown",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "下拉菜单描述文本",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "下拉菜单中的选项文本列表",
                  "ParamType": "Array@String",
                  "ParamName": "items",
                  "Optional": false
                },
                {
                  "Description": "可选参数）下拉菜单默认选中的列表项序号。",
                  "ParamType": "Integer",
                  "ParamName": "default",
                  "Optional": true
                }
              ],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "向表单内增加一行游标滑块",
              "FuncName": "addSlider",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "游标滑块描述文本",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "游标滑块最小值",
                  "ParamType": "Integer",
                  "ParamName": "min",
                  "Optional": false
                },
                {
                  "Description": "游标滑块最大值",
                  "ParamType": "Integer",
                  "ParamName": "max",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）游标滑块调整的最小分度值，默认为1",
                  "ParamType": "Integer",
                  "ParamName": "step",
                  "Optional": true
                },
                {
                  "Description": "（可选参数）游标滑块默认初始格数，数值必须在最小和最大格数之间。",
                  "ParamType": "Integer",
                  "ParamName": "default",
                  "Optional": true
                }
              ],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "向表单内增加一行步进滑块",
              "FuncName": "addStepSlider",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "步进滑块描述文本",
                  "ParamType": "String",
                  "ParamName": "title",
                  "Optional": false
                },
                {
                  "Description": "步进滑块的选项文本列表",
                  "ParamType": "Array@String",
                  "ParamName": "items",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）步进滑块默认初始选项。序号从0开始编号",
                  "ParamType": "Integer",
                  "ParamName": "default",
                  "Optional": true
                }
              ],
              "ReturnType": "CustomForm"
            }
          ],
          "AllProperty": [],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "自定义表单类型"
        },
        {
          "ClassName": "mc",
          "AllFunc": [
            {
              "Description": "创建表单对象",
              "FuncName": "newCustomForm",
              "ReturnDescription": "新创建的空白表单对象",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "CustomForm"
            },
            {
              "Description": "创建表单对象",
              "FuncName": "newSimpleForm",
              "ReturnDescription": "新创建的空白表单对象",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "SimpleForm"
            }
          ],
          "AllProperty": [],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "mc通用接口"
        },
        {
          "ClassName": "SimpleForm",
          "AllFunc": [
            {
              "Description": "设置表单的标题",
              "FuncName": "setTitle",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "标题",
                  "ParamType": "String",
                  "ParamName": "text",
                  "Optional": false
                }
              ],
              "ReturnType": "SimpleForm"
            },
            {
              "Description": "设置表单的内容",
              "FuncName": "setContent",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "表单的文本内容",
                  "ParamType": "String",
                  "ParamName": "content",
                  "Optional": false
                }
              ],
              "ReturnType": "SimpleForm"
            },
            {
              "Description": "向表单内增加一行按钮",
              "FuncName": "addButton",
              "ReturnDescription": "处理完毕的表单对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "按钮文本的字符串",
                  "ParamType": "String",
                  "ParamName": "text",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）按钮图片所在路径\n图片路径参数 image 使用材质包路径或者URL来标识按钮对应的图标。\n对于表单上的每个按钮，如下设置对应的图标\n 1.如果使用材质包路径，图片路径应该形如 textures/items/apple\n 2.如果使用URL路径，那么在这里放入完整的URL即可，形如 https://www.baidu.com/img/flexible/logo/pc/result.png\n 3.如果这个按钮你不需要显示图片，那不传入此参数即可",
                  "ParamType": "String",
                  "ParamName": "image",
                  "Optional": true
                }
              ],
              "ReturnType": "SimpleForm"
            }
          ],
          "AllProperty": [],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "简单表单类型"
        }
      ]
    },
    {
      "DirName": "Helpful",
      "AllClass": [
        {
          "ClassName": "Format",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "Black",
              "Description": "接下来的文字为 黑色 §0",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "DarkBlue",
              "Description": "接下来的文字为 深蓝色 §1",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "DarkGreen",
              "Description": "接下来的文字为 深绿色 §2",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "DarkAqua",
              "Description": "接下来的文字为 湖蓝色 §3",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "DarkRed",
              "Description": "接下来的文字为 深红色 §4",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "DarkPurple",
              "Description": "接下来的文字为 紫色 §5",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Gold",
              "Description": "接下来的文字为 金色 §6",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Gray",
              "Description": "接下来的文字为 灰色 §7",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "DarkGray",
              "Description": "接下来的文字为 深灰色 §8",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Blue",
              "Description": "接下来的文字为 蓝色§9",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Green",
              "Description": "接下来的文字为 浅绿色 §a",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Aqua",
              "Description": "接下来的文字为 天蓝色 §b",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Red",
              "Description": "接下来的文字为 浅红色 §c",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "LightPurple",
              "Description": "接下来的文字为 浅紫色 §d",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Yellow",
              "Description": "接下来的文字为 浅黄色 §e",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "White",
              "Description": "接下来的文字为 白色 §f",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "MinecoinGold ",
              "Description": "接下来的文字为 硬币金色 §g",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Bold",
              "Description": "接下来的文字 加粗 §l",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Italics",
              "Description": "接下来的文字 意大利体（俗称斜体）§o",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Underline",
              "Description": "接下来的文字 下划线 §n",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "StrikeThrough",
              "Description": "接下来的文字 删除线 §m",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Random",
              "Description": "接下来的文字 随机闪烁的乱码字符 §k",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Clear",
              "Description": "接下来的文字 清除所有格式§r",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": true
            }
          ],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "格式化代码实用工具"
        },
        {
          "ClassName": "logger",
          "AllFunc": [
            {
              "Description": "设置日志是否输出到控制台",
              "FuncName": "setConsole",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "设置日志是否输出到控制台",
                  "ParamType": "Boolean",
                  "ParamName": "isOpen",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）控制台的日志输出等级，默认为4",
                  "ParamType": "Integer",
                  "ParamName": "logLevel",
                  "Optional": true
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "设置日志是否输出到文件",
              "FuncName": "setFile",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "设置日志输出到的文件路径",
                  "ParamType": "String",
                  "ParamName": "filepath",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）文件的最小日志输出等级，默认为4",
                  "ParamType": "Integer",
                  "ParamName": "logLevel",
                  "Optional": true
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "设置日志是否输出到某个玩家",
              "FuncName": "setPlayer",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "设置日志输出到的目标玩家对象",
                  "ParamType": "Player",
                  "ParamName": "player",
                  "Optional": false
                },
                {
                  "Description": "玩家的最小日志输出等级，默认为4",
                  "ParamType": "Integer",
                  "ParamName": "logLevel",
                  "Optional": true
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "输出普通文本",
              "FuncName": "log",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待输出的变量或者数据",
                  "ParamType": "ParamArray@Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": " 输出调试信息",
              "FuncName": "debug",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待输出的变量或者数据",
                  "ParamType": "ParamArray@Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": " 输出提示信息",
              "FuncName": "info",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待输出的变量或者数据",
                  "ParamType": "ParamArray@Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "输出警告信息",
              "FuncName": "warn",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待输出的变量或者数据",
                  "ParamType": "ParamArray@Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "输出错误信息",
              "FuncName": "error",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待输出的变量或者数据",
                  "ParamType": "ParamArray@Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": " 输出严重错误信息",
              "FuncName": "fatal",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "待输出的变量或者数据",
                  "ParamType": "ParamArray@Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "设置自定义日志消息标头",
              "FuncName": "setTitle",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "设置的自定义标头",
                  "ParamType": "String",
                  "ParamName": "title ",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "统一修改日志输出等级",
              "FuncName": "setLogLevel",
              "ReturnDescription": "",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "日志输出等级",
                  "ParamType": "Integer",
                  "ParamName": "level",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            }
          ],
          "AllProperty": [],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "📅 通用日志 API"
        },
        {
          "ClassName": "lxl",
          "AllFunc": [
            {
              "Description": "获取LiteXLoader加载器版本",
              "FuncName": "version",
              "ReturnDescription": "加载器版本对象",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "ObjectVersion"
            },
            {
              "Description": "检查LiteXLoader加载器版本",
              "FuncName": "requireVersion",
              "ReturnDescription": "检查结果\r\n如果检测发现当前安装的LXL版本低于传入的数值，将返回false。\r\n你可以选择根据结果判断并报错，提醒用户升级自己的LXL版本",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "检查当前已安装LXL的主版本号是否 >= 此值",
                  "ParamType": "Integer",
                  "ParamName": "major",
                  "Optional": false
                },
                {
                  "Description": "检查当前已安装LXL的次版本号是否 >= 此值",
                  "ParamType": "Integer",
                  "ParamName": "minor",
                  "Optional": true
                },
                {
                  "Description": "检查当前已安装LXL的修订版本号是否 >= 此值",
                  "ParamType": "Integer",
                  "ParamName": "revision",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "列出所有已加载的插件",
              "FuncName": "listPlugins",
              "ReturnDescription": "已加载的所有的插件名字列表",
              "IsStatic": true,
              "Params": [],
              "ReturnType": "Array@String"
            },
            {
              "Description": "导出函数",
              "FuncName": "export",
              "ReturnDescription": "是否成功导出",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "要导出的函数",
                  "ParamType": "Function@{\"Func\":{\"Params\":[],\"ReturnType\":\"Any\"}}",
                  "ParamName": "func",
                  "Optional": false
                },
                {
                  "Description": "函数的导出名称。其他插件根据导出名称来调用这个函数",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "导入函数",
              "FuncName": "import",
              "ReturnDescription": "导入的函数",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "要导入的函数使用的导出名称",
                  "ParamType": "String",
                  "ParamName": "name",
                  "Optional": false
                }
              ],
              "ReturnType": "Function@{\"Func\":{\"Params\":[],\"ReturnType\":\"Any\"}}"
            },
            {
              "Description": "设置插件依赖库",
              "FuncName": "require",
              "ReturnDescription": "是否加载依赖库成功",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "依赖库文件名（如addplugin.js)",
                  "ParamType": "String",
                  "ParamName": "path",
                  "Optional": false
                },
                {
                  "Description": "（可选参数）查找并装载依赖库的路径",
                  "ParamType": "String",
                  "ParamName": "remotePath",
                  "Optional": true
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "将字符串作为脚本代码执行",
              "FuncName": "eval",
              "ReturnDescription": "执行结果",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "要作为脚本代码执行的字符串",
                  "ParamType": "String",
                  "ParamName": "str",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            }
          ],
          "AllProperty": [],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "💡 插件加载相关 API"
        }
      ]
    },
    {
      "DirName": "NBT",
      "AllClass": [
        {
          "ClassName": "NBT",
          "AllFunc": [
            {
              "Description": "根据你提供的数据，来创建新的NBT对象",
              "FuncName": "createTag",
              "ReturnDescription": "生成的NBT对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "你要创建的NBT对象的数据类型",
                  "ParamType": "NbtValue",
                  "ParamName": "type",
                  "Optional": false
                },
                {
                  "Description": "根据你要创建的对象类型设置初始数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtValue"
            },
            {
              "Description": "从 SNBT 字符串生成 NBT 对象",
              "FuncName": "parseSNBT",
              "ReturnDescription": "生成的NBT对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "你要解析的SNBT字符串",
                  "ParamType": "String",
                  "ParamName": "snbt",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "从二进制 NBT 数据生成 NBT 对象",
              "FuncName": "parseBinaryNBT",
              "ReturnDescription": "生成的NBT对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "你要解析的二进制 NBT 数据",
                  "ParamType": "ByteBuffer",
                  "ParamName": "nbt",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "根据你提供的数据，来创建新的NBT对象",
              "FuncName": "createTag",
              "ReturnDescription": "生成的NBT对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "你要创建的NBT对象的数据类型",
                  "ParamType": "NbtList",
                  "ParamName": "type",
                  "Optional": false
                },
                {
                  "Description": "根据你要创建的对象类型设置初始数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "根据你提供的数据，来创建新的NBT对象",
              "FuncName": "createTag",
              "ReturnDescription": "生成的NBT对象",
              "IsStatic": true,
              "Params": [
                {
                  "Description": "你要创建的NBT对象的数据类型",
                  "ParamType": "NbtCompound",
                  "ParamName": "type",
                  "Optional": false
                },
                {
                  "Description": "根据你要创建的对象类型设置初始数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            }
          ],
          "AllProperty": [
            {
              "PropertyName": "End",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Byte",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Short",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Int",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Long",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Float",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Double",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "ByteArray",
              "Description": "ByteArray",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "String",
              "Description": "NbtValue",
              "PropertyType": "NbtValue",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "List",
              "Description": "NbtList",
              "PropertyType": "NbtList",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "Compound",
              "Description": "NbtCompound",
              "PropertyType": "NbtCompound",
              "IsReadonly": false,
              "IsStatic": true
            }
          ],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "NBT"
        }
      ]
    },
    {
      "DirName": "Object",
      "AllClass": [
        {
          "ClassName": "Attributes",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "Base",
              "Description": "",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "Current",
              "Description": "",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "DefaultMax",
              "Description": "",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "DefaultMin",
              "Description": "",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "Max",
              "Description": "",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "Min",
              "Description": "",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "Name",
              "Description": "",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "Attributes属性"
        },
        {
          "ClassName": "Device",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "ip",
              "Description": "玩家设备的IP地址",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "avgPing",
              "Description": "玩家的平均网络延迟时间（ms）",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "avgPacketLoss",
              "Description": "玩家的平均网络丢包率（%）",
              "PropertyType": "Float",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "os",
              "Description": "玩家设备的操作系统类型",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            },
            {
              "PropertyName": "clientId",
              "Description": "玩家客户端的识别码ID",
              "PropertyType": "String",
              "IsReadonly": false,
              "IsStatic": false
            }
          ],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "获取一个设备信息对象"
        },
        {
          "ClassName": "Float",
          "AllFunc": [],
          "AllProperty": [],
          "IsStatic": false,
          "IsInterface": false,
          "Description": "float"
        },
        {
          "ClassName": "NbtCompound",
          "AllFunc": [
            {
              "Description": "获取NBT对象储存的数据类型",
              "FuncName": "getType",
              "ReturnDescription": "此NBT对象储存的数据类型",
              "IsStatic": false,
              "Params": [],
              "ReturnType": ""
            },
            {
              "Description": "将NBT对象转换为字符串",
              "FuncName": "toString",
              "ReturnDescription": "对应的Json字符串",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "（可选参数）如果要格式化输出的字符串，则传入此参数",
                  "ParamType": "Integer",
                  "ParamName": "space",
                  "Optional": false
                }
              ],
              "ReturnType": "String"
            },
            {
              "Description": "NBT对象序列化为SNBT",
              "FuncName": "toSNBT",
              "ReturnDescription": "对应的SNBT字符串",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "String"
            },
            {
              "Description": "NBT对象序列化为二进制NBT",
              "FuncName": "toBinary",
              "ReturnDescription": "对应的二进制NBT数据",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "ByteBuffer"
            },
            {
              "Description": "清理此NBT对象",
              "FuncName": "destroy",
              "ReturnDescription": "是否成功清理",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setEnd",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setByte",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setShort",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setInt",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setLong",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setFloat",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setDouble",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setString",
              "ReturnDescription": "写入完毕的NBT对象（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtCompound"
            },
            {
              "Description": "读取键对应的值的具体数据",
              "FuncName": "getData",
              "ReturnDescription": "键对应的值的具体数据",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的键名",
                  "ParamType": "String",
                  "ParamName": "key",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "将Compound类型转换为Object",
              "FuncName": "toObject",
              "ReturnDescription": "对应的对象 / 表",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Object"
            }
          ],
          "AllProperty": [],
          "IsStatic": false,
          "IsInterface": false,
          "Description": ""
        },
        {
          "ClassName": "NbtList",
          "AllFunc": [
            {
              "Description": "获取NBT对象储存的数据类型",
              "FuncName": "getType",
              "ReturnDescription": "此NBT对象储存的数据类型",
              "IsStatic": false,
              "Params": [],
              "ReturnType": ""
            },
            {
              "Description": "将NBT对象转换为字符串",
              "FuncName": "toString",
              "ReturnDescription": "对应的Json字符串",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "（可选参数）如果要格式化输出的字符串，则传入此参数",
                  "ParamType": "Integer",
                  "ParamName": "space",
                  "Optional": false
                }
              ],
              "ReturnType": "String"
            },
            {
              "Description": "清理此NBT对象",
              "FuncName": "destroy",
              "ReturnDescription": "是否成功清理",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "获取列表长度",
              "FuncName": "getSize",
              "ReturnDescription": "此列表的长度",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Integer"
            },
            {
              "Description": "获取某个下标位置储存的数据类型",
              "FuncName": "getTypeOf",
              "ReturnDescription": "此坐标处储存的NBT的数据类型",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要查询的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "设置某个下标位置的NBT对象",
              "FuncName": "setTag",
              "ReturnDescription": "写入完毕的NBT列表",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的 NBT 对象（它承载着具体的NBT数据）。\n写入对象的数据类型必须和下标位置储存的数据类型一致，且下标不能超出有效下标的最大值",
                  "ParamType": "Any",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "读取某个下标位置的NBT对象",
              "FuncName": "getTag",
              "ReturnDescription": "下标位置的NBT对象。如果要读取的NBT不存在，将返回Null",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Any",
                  "ParamName": "index",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "往列表末尾追加一个NBT对象",
              "FuncName": "addTag",
              "ReturnDescription": "追加完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要追加的 NBT 对象（它承载着具体的NBT数据）",
                  "ParamType": "Any",
                  "ParamName": "tag",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "删除某个下标位置的NBT对象",
              "FuncName": "removeTag",
              "ReturnDescription": "处理完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要删除的目标下标，\n下标不能超出有效下标的最大值",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setEnd",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setByte",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setShort",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setInt",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setLong",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setFloat",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setDouble",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "设置某个下标位置的具体数据",
              "FuncName": "setString",
              "ReturnDescription": "写入完毕的NBT列表（便于连锁进行其他操作）",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                },
                {
                  "Description": "要写入的具体数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "NbtList"
            },
            {
              "Description": "读取某个下标位置的具体数据",
              "FuncName": "getData",
              "ReturnDescription": "指定位置储存的具体数据",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "要操作的目标下标",
                  "ParamType": "Integer",
                  "ParamName": "index",
                  "Optional": false
                }
              ],
              "ReturnType": "Any"
            },
            {
              "Description": "将NbtList类型转换为Array",
              "FuncName": "toArray",
              "ReturnDescription": "对应的数组 / 列表",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Array@Any"
            }
          ],
          "AllProperty": [],
          "IsStatic": false,
          "IsInterface": false,
          "Description": ""
        },
        {
          "ClassName": "NbtValue",
          "AllFunc": [
            {
              "Description": "获取NBT对象储存的数据类型",
              "FuncName": "getType",
              "ReturnDescription": "此NBT对象储存的数据类型",
              "IsStatic": false,
              "Params": [],
              "ReturnType": ""
            },
            {
              "Description": "将NBT对象转换为字符串",
              "FuncName": "toString",
              "ReturnDescription": "对应的Json字符串",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "（可选参数）如果要格式化输出的字符串，则传入此参数",
                  "ParamType": "Integer",
                  "ParamName": "space",
                  "Optional": false
                }
              ],
              "ReturnType": "String"
            },
            {
              "Description": "清理此NBT对象",
              "FuncName": "destroy",
              "ReturnDescription": "是否成功清理",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Boolean"
            },
            {
              "Description": "设置对象的数据",
              "FuncName": "set",
              "ReturnDescription": "是否成功写入",
              "IsStatic": false,
              "Params": [
                {
                  "Description": "根据这个NBT对象的数据类型，写入对应类型的数据",
                  "ParamType": "Any",
                  "ParamName": "data",
                  "Optional": false
                }
              ],
              "ReturnType": "Boolean"
            },
            {
              "Description": "读取对象的数据",
              "FuncName": "get",
              "ReturnDescription": "对象中储存的数据",
              "IsStatic": false,
              "Params": [],
              "ReturnType": "Any"
            }
          ],
          "AllProperty": [],
          "IsStatic": false,
          "IsInterface": false,
          "Description": ""
        },
        {
          "ClassName": "ObjectRuncmdEx",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "success",
              "Description": "是否执行成功",
              "PropertyType": "Boolean",
              "IsReadonly": true,
              "IsStatic": true
            },
            {
              "PropertyName": "output",
              "Description": "BDS执行命令后的输出结果",
              "PropertyType": "String",
              "IsReadonly": true,
              "IsStatic": true
            }
          ],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "mc.runcmdEx的返回结果"
        },
        {
          "ClassName": "ObjectVersion",
          "AllFunc": [],
          "AllProperty": [
            {
              "PropertyName": "major",
              "Description": "主版本号（如 1.0.2 里的 1）",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "minor",
              "Description": "次版本号（如 1.0.2 里的 0）",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "revision",
              "Description": "修订版本号（如 1.0.2 里的 2）",
              "PropertyType": "Integer",
              "IsReadonly": false,
              "IsStatic": true
            },
            {
              "PropertyName": "isBeta",
              "Description": "当前版本是否为测试版",
              "PropertyType": "Boolean",
              "IsReadonly": false,
              "IsStatic": true
            }
          ],
          "IsStatic": true,
          "IsInterface": false,
          "Description": "加载器版本对象"
        }
      ]
    }
  ]
}