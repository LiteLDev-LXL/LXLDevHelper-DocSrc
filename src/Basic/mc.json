{
  "ClassName": "mc",
  "AllFunc": [
    {
      "Description": "生成一个浮点数坐标对象",
      "FuncName": "newFloatPos",
      "ReturnDescription": "一个浮点数坐标对象",
      "IsStatic": true,
      "Params": [
        {
          "Description": "x 坐标",
          "ParamType": "Float",
          "ParamName": "x",
          "Optional": false
        },
        {
          "Description": "y 坐标",
          "ParamType": "Float",
          "ParamName": "y",
          "Optional": false
        },
        {
          "Description": "z 坐标",
          "ParamType": "Float",
          "ParamName": "z",
          "Optional": false
        },
        {
          "Description": "维度ID：0 代表主世界，1 代表下界，2 代表末地",
          "ParamType": "Integer",
          "ParamName": "dimid ",
          "Optional": false
        }
      ],
      "ReturnType": "FloatPos"
    },
    {
      "Description": "获取BDS服务端版本号",
      "FuncName": "getBDSVersion",
      "ReturnDescription": "服务端版本号字符串，格式形如v1.17.10",
      "IsStatic": true,
      "Params": [],
      "ReturnType": "String"
    },
    {
      "Description": "执行一条后台命令",
      "FuncName": "runcmd",
      "ReturnDescription": "是否执行成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "待执行的命令",
          "ParamType": "String",
          "ParamName": "cmd",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "执行一条后台命令（强化版）",
      "FuncName": "runcmdEx",
      "ReturnDescription": "命令执行结果Object",
      "IsStatic": true,
      "Params": [
        {
          "Description": "指令内容",
          "ParamType": "String",
          "ParamName": "cmd",
          "Optional": false
        }
      ],
      "ReturnType": "ObjectRuncmdEx"
    },
    {
      "Description": "通过方块坐标手动生成方块对象\r\n通过此函数来手动生成对象，注意，你要获取的方块必须处于已被加载的范围中，否则会出现问题",
      "FuncName": "getBlock",
      "ReturnDescription": "如返回值为 Null 则表示获取方块失败\r\n注意：不要长期保存一个方块对象\r\n当方块对象对应的方块被销毁时，对应的方块对象将变得无效。因此，如果有长期操作某个方块的需要，请通过上述途径获取实时的方块对象",
      "IsStatic": true,
      "Params": [
        {
          "Description": "方块坐标对象（或者使用x, y, z, dimid来确定方块位置）",
          "ParamType": "IntPos",
          "ParamName": "pos",
          "Optional": false
        }
      ],
      "ReturnType": "Block|Null"
    },
    {
      "Description": "通过方块坐标手动生成方块对象\r\n通过此函数来手动生成对象，注意，你要获取的方块必须处于已被加载的范围中，否则会出现问题",
      "FuncName": "getBlock",
      "ReturnDescription": "如返回值为 Null 则表示获取方块失败\r\n注意：不要长期保存一个方块对象\r\n当方块对象对应的方块被销毁时，对应的方块对象将变得无效。因此，如果有长期操作某个方块的需要，请通过上述途径获取实时的方块对象",
      "IsStatic": true,
      "Params": [
        {
          "Description": "方块x坐标",
          "ParamType": "Integer",
          "ParamName": "x",
          "Optional": false
        },
        {
          "Description": "方块y坐标",
          "ParamType": "Integer",
          "ParamName": "y",
          "Optional": false
        },
        {
          "Description": "方块z坐标",
          "ParamType": "Integer",
          "ParamName": "z",
          "Optional": false
        },
        {
          "Description": "方块维度",
          "ParamType": "Integer",
          "ParamName": "dimid",
          "Optional": false
        }
      ],
      "ReturnType": "Block|Null"
    },
    {
      "Description": "设置指定位置的方块",
      "FuncName": "setBlock",
      "ReturnDescription": "是否成功设置",
      "IsStatic": true,
      "Params": [
        {
          "Description": "目标方块位置",
          "ParamType": "IntPos",
          "ParamName": "pos",
          "Optional": false
        },
        {
          "Description": "要设置成的方块对象或者方块名",
          "ParamType": "Block|String",
          "ParamName": "block",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "设置指定位置的方块\r\n通过此函数，将一个坐标对应的方块设置成另一个，类似于命令 /setblock\r\n如果使用方块名称，则方块名称须为标准类型名，且首字母大写，类似于 Stone\r\n否则，函数将执行失败",
      "FuncName": "setBlock",
      "ReturnDescription": "是否成功设置",
      "IsStatic": true,
      "Params": [
        {
          "Description": "方块x坐标",
          "ParamType": "Integer",
          "ParamName": "x",
          "Optional": false
        },
        {
          "Description": "方块y坐标",
          "ParamType": "Integer",
          "ParamName": "y",
          "Optional": false
        },
        {
          "Description": "方块z坐标",
          "ParamType": "Integer",
          "ParamName": "z",
          "Optional": false
        },
        {
          "Description": "方块维度",
          "ParamType": "Integer",
          "ParamName": "dimid",
          "Optional": false
        },
        {
          "Description": "要设置成的方块对象或者方块名",
          "ParamType": "Block|String",
          "ParamName": "block",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "在指定位置生成粒子效果",
      "FuncName": "spawnParticle",
      "ReturnDescription": "是否成功生成",
      "IsStatic": true,
      "Params": [
        {
          "Description": "目标方块位置",
          "ParamType": "IntPos",
          "ParamName": "pos",
          "Optional": false
        },
        {
          "Description": "要生成的粒子效果名称（可查阅wiki得知）",
          "ParamType": "String",
          "ParamName": "type",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "在指定位置生成粒子效果",
      "FuncName": "spawnParticle",
      "ReturnDescription": "是否成功生成",
      "IsStatic": true,
      "Params": [
        {
          "Description": "方块x坐标",
          "ParamType": "Integer",
          "ParamName": "x",
          "Optional": false
        },
        {
          "Description": "方块y坐标",
          "ParamType": "Integer",
          "ParamName": "y",
          "Optional": false
        },
        {
          "Description": "方块z坐标",
          "ParamType": "Integer",
          "ParamName": "z",
          "Optional": false
        },
        {
          "Description": "要生成的粒子效果名称（可查阅wiki得知）",
          "ParamType": "String",
          "ParamName": "type",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家开始连接服务器",
          "ParamType": "\"onPreJoin\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家进入游戏（加载世界完成）",
          "ParamType": "\"onJoin\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家离开游戏",
          "ParamType": "\"onLeft\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家重生",
          "ParamType": "\"onRespawn\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家死亡",
          "ParamType": "\"onPlayerDie\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家执行命令",
          "ParamType": "\"onPlayerCmd\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"String\",\"ParamName\":\"cmd\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家发送聊天信息",
          "ParamType": "\"onChat\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"String\",\"ParamName\":\"msg\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家切换维度",
          "ParamType": "\"onChangeDim\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家跳跃",
          "ParamType": "\"onJump\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家切换潜行状态",
          "ParamType": "\"onSneak\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Boolean\",\"ParamName\":\"isSneaking\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家攻击实体",
          "ParamType": "\"onAttack\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Entity\",\"ParamName\":\"entity\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家使用物品",
          "ParamType": "\"onUseItem\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家对方块使用物品（点击右键）",
          "ParamType": "\"onUseItemOn\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家捡起物品",
          "ParamType": "\"onTakeItem\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Entity\",\"ParamName\":\"entity\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家丢出物品",
          "ParamType": "\"onDropItem\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家食用食物",
          "ParamType": "\"onEat\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家开始破坏方块 / 点击左键",
          "ParamType": "\"onStartDestroyBlock\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家破坏方块完成",
          "ParamType": "\"onDestroyBlock\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家放置方块",
          "ParamType": "\"onPlaceBlock\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家打开容器方块",
          "ParamType": "\"onOpenContainer\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家关闭容器方块",
          "ParamType": "\"onCloseContainer\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Block\",\"ParamName\":\"block\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家物品栏变化",
          "ParamType": "\"onInventoryChange\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Integer\",\"ParamName\":\"slotNum\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"oldItem\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"newItem\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家移动",
          "ParamType": "\"onMove\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"FloatPos\",\"ParamName\":\"pos\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家改变盔甲栏",
          "ParamType": "\"onSetArmor\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Integer\",\"ParamName\":\"slotNum\",\"Optional\":false},{\"ParamType\":\"Item\",\"ParamName\":\"item\",\"Optional\":false}],\"ReturnType\":\"Void\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家使用重生锚",
          "ParamType": "\"onUseRespawnAnchor\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"IntPos\",\"ParamName\":\"pos\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "新增监听器\r\n拦截事件\r\n在LXL的事件监听系统中，一般你可以通过return false来拦截某个可以被拦截的事件。拦截事件意味着在脚本拦截之后BDS将不再处理这个事件，就像他从没发生过一样。\r\n举例：拦截某条聊天事件，会造成所有人都看不到这条聊天消息\r\n不过，拦截事件仅对BDS有效。\r\n也就是说，拦截事件并不影响其他有对应监听的LXL脚本处理这个事件，只是BDS无法再接收到它。\r\n避开误区\r\n有些时候，在某些事件监听内部调用特定的API会造成死循环崩服，请务必避免这些情况的发生\r\n举例：在onConsoleCmd事件监听中调用mc.runcmd(Ex)系列函数执行后台指令，将导致死循环",
      "FuncName": "listen",
      "ReturnDescription": "是否添加成功",
      "IsStatic": true,
      "Params": [
        {
          "Description": "玩家打开容器类GUI",
          "ParamType": "\"onOpenContainerScreen\"",
          "ParamName": "event",
          "Optional": false
        },
        {
          "Description": "事件回调",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "注册一个新的玩家命令",
      "FuncName": "regPlayerCmd",
      "ReturnDescription": "是否成功注册",
      "IsStatic": true,
      "Params": [
        {
          "Description": "待注册的命令",
          "ParamType": "String",
          "ParamName": "cmd",
          "Optional": false
        },
        {
          "Description": "命令描述文本",
          "ParamType": "String",
          "ParamName": "description",
          "Optional": false
        },
        {
          "Description": "注册的这个命令被执行时，接口自动调用的回调函数",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Player\",\"ParamName\":\"player\",\"Optional\":false},{\"ParamType\":\"Array@String\",\"ParamName\":\"args\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        },
        {
          "Description": "（可选参数）命令的注册等级，默认为 0 ，即所有人都可以执行",
          "ParamType": "Integer",
          "ParamName": "level",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "注册一个新的后台控制台命令",
      "FuncName": "regConsoleCmd",
      "ReturnDescription": "是否成功注册",
      "IsStatic": true,
      "Params": [
        {
          "Description": "待注册的命令",
          "ParamType": "String",
          "ParamName": "cmd",
          "Optional": false
        },
        {
          "Description": "命令描述文本",
          "ParamType": "String",
          "ParamName": "description",
          "Optional": false
        },
        {
          "Description": "注册的这个命令被执行时，接口自动调用的回调函数",
          "ParamType": "Function@{\"Func\":{\"Params\":[{\"ParamType\":\"Array@String\",\"ParamName\":\"args\",\"Optional\":false}],\"ReturnType\":\"Boolean\"}}",
          "ParamName": "callback",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    },
    {
      "Description": "模拟产生一个控制台命令输出",
      "FuncName": "sendCmdOutput",
      "ReturnDescription": "是否成功执行",
      "IsStatic": true,
      "Params": [
        {
          "Description": "模拟产生的命令输出",
          "ParamType": "String",
          "ParamName": "output",
          "Optional": false
        }
      ],
      "ReturnType": "Boolean"
    }
  ],
  "AllProperty": [],
  "IsStatic": true,
  "IsInterface": false,
  "Description": "mc通用接口"
}